game: guess that function!

from guess import *

x = 0
y = f(x)
y

make them choose x values, show them y, and make them guess about f

==================================================
SLIDES: function overview
==================================================

# let's start with some functions we have already used

'hi'
print('hi') # why do we need this?
type('hi')  # review types
type(1)
type(1.0)
type(1 == 1.0)

type(1 == 1.0)      # in interactive mode, this goes to output
type(1 == 1.0)      # in script mode, this is lost
t = type(1 == 1.0)  # in both modes, save it to a variable
print(t)
print(type(1 == 1.0)) # compose them into one step

==================================================

# DEMO: input

parrot.py
 - just input()
 - what is the return value of print()?
   Talk about NoneType, x==None, "fruitful" functions...
 - functions (a) do something and/or (b) give you something!

hello.py
 - input(prompt)

# DEMO: type conversion (casting)

add.py
 - show we get concat when we wanted addition (same symbol, different meanings for different operands)
 - give casting examples:
   first, add.py casts input with int()
   second, do it with float

# more casting examples
 - float -> int
 - x - int(x)
 - "the number is " + str(x)

==================================================

# DEMO: multiple arguments

print(1)
print(1, 2, 3)

# DEMO: named arguments, default arguments

print(1, 2, 3, sep=',')               # positional vs. named
print(1, 2, 3, sep=' ')               # default
print(1, 2, 3, sep=',', end='.')
print(1, 2, 3, sep=',', end='.\n')
print(1, 2, 3, end='.\n', sep=',')
print(sep=',', 1, 2, 3, end='.\n')    # positional must be first

==================================================
SLIDES: battleship demo overview
==================================================

battleship.py
 - show a map, with 1 for hit and 0 for miss
 - give example of x=x1 and y=y1 or x=x2 and y=y2 or ... (boolean logic!!!)

 - v1: one point, v2: larger ship, v3: multiple ships, v4: random location
   (probably save v2 and v3 for end, depending on time)

==================================================
SLIDES: what are modules, and where do they come from
==================================================

# using modules

talk about what about what a module is (bunch of functions)

cat.py and dog.py are here: tyler/cs301/spring19/materials/code/lec-06/

They contain these functions:

----------------------------------------
def speak():
"""this makes the dog print 'bark'"""
    print('bark')

def give_treat():
    print('wags tails')
----------------------------------------
def speak():
    """this makes the cat print 'meow'"""
        print('meow')
----------------------------------------

# let's try it!  (star means everything)

speak()
from dog import *
speak()
from cat import *
speak()

# how to get back to dog speaking?

import dog
import cat
dog.speak()
cat.speak()

# talk about attribute operator (the dot)
 - Easy to confuse with a decimal point!
 - it's high precedence!  https://docs.python.org/3/reference/expressions.html#operator-precedence

==================================================

# DEMO: dynamic inspection

1. inspect a module

type(dog)
dir(dog)

talk about double underscore and private

type(dog.speak)
dog.speak()

2. inspect a function's documentation

dog.speak.__doc__
dog.give_treat.__doc__
dog.give_treat()

3. inspect, say, a number

dir(3.14)

==================================================

We're going to provide "project" module for your projects!

==================================================

# DEMO: math module

dir(math)

search for "python 3 math module"

documentation:
 - https://docs.python.org/3/library/math.html
 - print(math.sqrt.__doc__)

examples: ceil, floor, factorial, log, isclose

==================================================

# DEMO: builtins

dir(__builtins__)

https://docs.python.org/3/library/functions.html

input, type, print,
min, max, abs, round

round.__doc__

round(123.456)
round(123.456, 2)
round(123.456, -1)

==================================================

BONUS DEMOS: time permitting

1. make battleship better

2. given two points in polar coordinates, compute distance between them
   using sin, cos, etc.
